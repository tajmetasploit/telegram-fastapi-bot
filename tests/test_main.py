# tests/test_main.py

import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.database import Base, get_db
from app.main import app
from app.models import Message

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# üß™ –§–∏–∫—Å—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@pytest.fixture(scope="function")
def db():
    Base.metadata.create_all(bind=engine)
    db = TestingSessionLocal()
    yield db
    db.close()
    Base.metadata.drop_all(bind=engine)

# ‚õì –ü–æ–¥–º–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ get_db
@pytest.fixture(scope="function")
def client(db):
    def override_get_db():
        yield db
    app.dependency_overrides[get_db] = override_get_db
    return TestClient(app)

# üå± –¢–µ—Å—Ç: –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
def test_root(client):
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "üëã –ü—Ä–∏–≤–µ—Ç! FastAPI –∑–∞–ø—É—â–µ–Ω."}

# üÜï –¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def test_create_message(client):
    response = client.post("/messages", params={"content": "Hello FastAPI"})
    assert response.status_code == 200
    data = response.json()
    assert "id" in data and "text" in data
    assert data["text"] == "Hello FastAPI"

# üìã –¢–µ—Å—Ç: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def test_get_all_messages(client):
    client.post("/messages", params={"content": "Msg 1"})
    client.post("/messages", params={"content": "Msg 2"})
    response = client.get("/messages")
    assert response.status_code == 200
    messages = response.json()
    assert len(messages) == 2

# üîç –¢–µ—Å—Ç: –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
def test_get_message_by_id(client):
    post_resp = client.post("/messages", params={"content": "Find me"})
    msg_id = post_resp.json()["id"]

    get_resp = client.get(f"/messages/{msg_id}")
    assert get_resp.status_code == 200
    assert get_resp.json()["text"] == "Find me"

# üìù –¢–µ—Å—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def test_update_message(client):
    post_resp = client.post("/messages", params={"content": "Old text"})
    msg_id = post_resp.json()["id"]

    put_resp = client.put(f"/messages/{msg_id}", params={"new_content": "Updated text"})
    assert put_resp.status_code == 200
    assert put_resp.json()["text"] == "Updated text"

# ‚ùå –¢–µ—Å—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def test_update_not_found(client):
    resp = client.put("/messages/999", params={"new_content": "?"})
    assert resp.status_code == 404

# üóëÔ∏è –¢–µ—Å—Ç: —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def test_delete_message(client):
    post_resp = client.post("/messages", params={"content": "To delete"})
    msg_id = post_resp.json()["id"]

    del_resp = client.delete(f"/messages/{msg_id}")
    assert del_resp.status_code == 200
    assert "—É–¥–∞–ª–µ–Ω–æ" in del_resp.json()["detail"]

# ‚ùå –¢–µ—Å—Ç: —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def test_delete_not_found(client):
    del_resp = client.delete("/messages/12345")
    assert del_resp.status_code == 404
