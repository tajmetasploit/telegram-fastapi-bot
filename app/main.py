"""

from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from app.database import get_db, Base, engine
from app.models import Message
from app.bot import start_bot
import asyncio

app = FastAPI(title="Telegram + FastAPI Project")

# üì¶ Create tables in DB
Base.metadata.create_all(bind=engine)

# üü¢ Root
@app.get("/")
async def root():
    return {"message": "Hello from FastAPI!"}

# üü¢ List all messages
@app.get("/messages")
def get_messages(db: Session = Depends(get_db)):
    messages = db.query(Message).all()
    return [{"id": m.id, "content": m.text} for m in messages]

# üü¢ Get message by ID
@app.get("/messages/{message_id}")
def get_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="Message not found")
    return {"id": message.id, "content": message.text}

# ‚ûï Create message
@app.post("/messages")
def create_message(content: str, db: Session = Depends(get_db)):
    new_message = Message(text=content)
    db.add(new_message)
    db.commit()
    db.refresh(new_message)
    return {"id": new_message.id, "content": new_message.text}

# ‚úèÔ∏è Update message by ID
@app.put("/messages/{message_id}")
def update_message(message_id: int, new_content: str, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="Message not found")
    message.text = new_content
    db.commit()
    db.refresh(message)
    return {"id": message.id, "content": message.text}

# ‚ùå Delete message by ID
@app.delete("/messages/{message_id}")
def delete_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="Message not found")
    db.delete(message)
    db.commit()
    return {"detail": f"Message with ID {message_id} deleted successfully."}

# üöÄ Run Telegram bot when FastAPI starts
@app.on_event("startup")
async def on_startup():
    asyncio.create_task(start_bot())
"""

"""from fastapi import FastAPI, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.database import get_db, Base, engine
from app.models import Message
from app.bot import start_bot
import asyncio

app = FastAPI(title="–ü—Ä–æ–µ–∫—Ç Telegram + FastAPI")

# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
Base.metadata.create_all(bind=engine)

# üü¢ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/")
async def root():
    return {"message": "üëã –ü—Ä–∏–≤–µ—Ç! FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç."}

# üü¢ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@app.get("/messages", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
def get_messages(db: Session = Depends(get_db)):
    messages = db.query(Message).all()
    return [{"id": m.id, "—Ç–µ–∫—Å—Ç": m.text} for m in messages]

# üü¢ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
@app.get("/messages/{message_id}", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID")
def get_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return {"id": message.id, "—Ç–µ–∫—Å—Ç": message.text}

# ‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.post("/messages", summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
def create_message(content: str = Query(..., description="–¢–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"), db: Session = Depends(get_db)):
    new_message = Message(text=content)
    db.add(new_message)
    db.commit()
    db.refresh(new_message)
    return {"id": new_message.id, "—Ç–µ–∫—Å—Ç": new_message.text}

# ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.put("/messages/{message_id}", summary="–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
def update_message(
    message_id: int,
    new_content: str = Query(..., description="–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"),
    db: Session = Depends(get_db)
):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    message.text = new_content
    db.commit()
    db.refresh(message)
    return {"id": message.id, "—Ç–µ–∫—Å—Ç": message.text}

# ‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.delete("/messages/{message_id}", summary="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID")
def delete_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    db.delete(message)
    db.commit()
    return {"detail": f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."}

# üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ —Å FastAPI
@app.on_event("startup")
async def on_startup():
    asyncio.create_task(start_bot())
"""

"""from fastapi import FastAPI, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.database import get_db, Base, engine
from app.models import Message
from app.bot import start_bot
import asyncio
import os
app = FastAPI(title="–ü—Ä–æ–µ–∫—Ç Telegram + FastAPI")

print("DATABASE_URL is:", os.getenv("DATABASE_URL"))


# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
Base.metadata.create_all(bind=engine)

# üü¢ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/")
async def root():
    return {"message": "üëã –ü—Ä–∏–≤–µ—Ç! FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç."}

# üü¢ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@app.get("/messages", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
def get_messages(db: Session = Depends(get_db)):
    messages = db.query(Message).all()
    return [{"id": m.id, "—Ç–µ–∫—Å—Ç": m.text} for m in messages]

# üü¢ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
@app.get("/messages/{message_id}", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID")
def get_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return {"id": message.id, "—Ç–µ–∫—Å—Ç": message.text}

# ‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.post("/messages", summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
def create_message(content: str = Query(..., description="–¢–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"), db: Session = Depends(get_db)):
    new_message = Message(text=content)
    db.add(new_message)
    db.commit()
    db.refresh(new_message)
    return {"id": new_message.id, "—Ç–µ–∫—Å—Ç": new_message.text}

# ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.put("/messages/{message_id}", summary="–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
def update_message(
    message_id: int,
    new_content: str = Query(..., description="–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"),
    db: Session = Depends(get_db)
):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    message.text = new_content
    db.commit()
    db.refresh(message)
    return {"id": message.id, "—Ç–µ–∫—Å—Ç": message.text}

# ‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.delete("/messages/{message_id}", summary="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID")
def delete_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    db.delete(message)
    db.commit()
    return {"detail": f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."}

# üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ —Å FastAPI
@app.on_event("startup")
async def on_startup():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(start_bot())


app = FastAPI()

@app.on_event("startup")
async def on_startup():
    asyncio.create_task(start_bot())  # Start Telegram bot as background task


import asyncio
from fastapi import FastAPI
from app.bot import dp, bot, register_handlers  # Import your bot setup

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    print("üöÄ Starting both FastAPI and Telegram Bot")
    register_handlers(dp)

    # Start Telegram bot in background
    asyncio.create_task(dp.start_polling(bot))"""


""""# app/main.py
from fastapi import FastAPI, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.database import get_db, Base, engine
from app.models import Message
import asyncio
import os
from fastapi import FastAPI, Depends



from fastapi import FastAPI
from app.bot import start_bot  # import the bot startup
import asyncio

app = FastAPI(title="Telegram + FastAPI Project")

# Create tables on startup
Base.metadata.create_all(bind=engine)

# Root endpoint
@app.get("/")
async def root():
    return {"message": "üëã Hello! FastAPI is running."}

# Get all messages
@app.get("/messages", summary="Get all messages")
def get_messages(db: Session = Depends(get_db)):
    messages = db.query(Message).all()
    return [{"id": m.id, "text": m.text} for m in messages]

# Get a message by ID
@app.get("/messages/{message_id}", summary="Get message by ID")
def get_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå Message not found.")
    return {"id": message.id, "text": message.text}

# Create a message
@app.post("/messages", summary="Create new message")
def create_message(content: str = Query(...), db: Session = Depends(get_db)):
    new_message = Message(text=content)
    db.add(new_message)
    db.commit()
    db.refresh(new_message)
    return {"id": new_message.id, "text": new_message.text}

# Update a message
@app.put("/messages/{message_id}", summary="Update a message")
def update_message(message_id: int, new_content: str = Query(...), db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå Message not found.")
    message.text = new_content
    db.commit()
    db.refresh(message)
    return {"id": message.id, "text": message.text}

# Delete a message
@app.delete("/messages/{message_id}", summary="Delete a message")
def delete_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå Message not found.")
    db.delete(message)
    db.commit()
    return {"detail": f"‚úÖ Message with ID {message_id} deleted."}

@app.on_event("startup")
async def startup_event():
    asyncio.create_task(start_bot())  # runs the bot in background

# Optional: start Telegram bot in background (not recommended with polling)
# Instead, use a separate `run_bot.py` for polling"""

"""
# app/main.py
from fastapi import FastAPI, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.database import get_db, Base, engine
from app.models import Message
import asyncio
import os
from fastapi import FastAPI, Depends

from fastapi import FastAPI
from app.bot import start_bot  # import the bot startup
import asyncio

app = FastAPI(title="Telegram + FastAPI Project")

# Create tables on startup
Base.metadata.create_all(bind=engine)

# Root endpoint
@app.get("/")
async def root():
    return {"message": "üëã Hello! FastAPI is running."}

# Get all messages
@app.get("/messages", summary="Get all messages")
def get_messages(db: Session = Depends(get_db)):
    messages = db.query(Message).all()
    return [{"id": m.id, "text": m.text} for m in messages]

# Get a message by ID
@app.get("/messages/{message_id}", summary="Get message by ID")
def get_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå Message not found.")
    return {"id": message.id, "text": message.text}

# Create a message
@app.post("/messages", summary="Create new message")
def create_message(content: str = Query(...), db: Session = Depends(get_db)):
    new_message = Message(text=content)
    db.add(new_message)
    db.commit()
    db.refresh(new_message)
    return {"id": new_message.id, "text": new_message.text}

# Update a message
@app.put("/messages/{message_id}", summary="Update a message")
def update_message(message_id: int, new_content: str = Query(...), db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå Message not found.")
    message.text = new_content
    db.commit()
    db.refresh(message)
    return {"id": message.id, "text": message.text}

# Delete a message
@app.delete("/messages/{message_id}", summary="Delete a message")
def delete_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå Message not found.")
    db.delete(message)
    db.commit()
    return {"detail": f"‚úÖ Message with ID {message_id} deleted."}

@app.on_event("startup")
async def startup_event():
    asyncio.create_task(start_bot())  # runs the bot in background

if __name__ == "__main__":
    import os
    import uvicorn
    import asyncio
    from app.bot import start_bot

    async def run():
        asyncio.create_task(start_bot())  # Start the bot
        port = int(os.environ.get("PORT", 3000))
        config = uvicorn.Config("app.main:app", host="0.0.0.0", port=port)
        server = uvicorn.Server(config)
        await server.serve()

    asyncio.run(run())


# Optional: start Telegram bot in background (not recommended with polling)
# Instead, use a separate `run_bot.py` for polling


# ‚úÖ Railway-compatible run block (added below)
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 5000))
    uvicorn.run("app.main:app", host="0.0.0.0", port=port)

"""
# app/main.py
from fastapi import FastAPI, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.database import get_db, Base, engine
from app.models import Message
import asyncio
import os
from fastapi import FastAPI, Depends

from fastapi import FastAPI
from app.bot import start_bot  # –∏–º–ø–æ—Ä—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
import asyncio

app = FastAPI(title="–ü—Ä–æ–µ–∫—Ç Telegram + FastAPI")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Base.metadata.create_all(bind=engine)

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/")
async def root():
    return {"message": "üëã –ü—Ä–∏–≤–µ—Ç! FastAPI –∑–∞–ø—É—â–µ–Ω."}



# –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
@app.get("/messages/{message_id}", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID")
def get_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return {"id": message.id, "text": message.text}

# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.post("/messages", summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
def create_message(content: str = Query(...), db: Session = Depends(get_db)):
    new_message = Message(text=content)
    db.add(new_message)
    db.commit()
    db.refresh(new_message)
    return {"id": new_message.id, "text": new_message.text}

# –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.put("/messages/{message_id}", summary="–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
def update_message(message_id: int, new_content: str = Query(...), db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    message.text = new_content
    db.commit()
    db.refresh(message)
    return {"id": message.id, "text": message.text}

# –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@app.delete("/messages/{message_id}", summary="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
def delete_message(message_id: int, db: Session = Depends(get_db)):
    message = db.query(Message).filter(Message.id == message_id).first()
    if not message:
        raise HTTPException(status_code=404, detail="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    db.delete(message)
    db.commit()
    return {"detail": f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É–¥–∞–ª–µ–Ω–æ."}

@app.on_event("startup")
async def startup_event():
    asyncio.create_task(start_bot())  # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ

if __name__ == "__main__":
    import os
    import uvicorn
    import asyncio
    from app.bot import start_bot

    async def run():
        asyncio.create_task(start_bot())  # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        port = int(os.environ.get("PORT", 3000))
        config = uvicorn.Config("app.main:app", host="0.0.0.0", port=port)
        server = uvicorn.Server(config)
        await server.serve()

    asyncio.run(run())


# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å polling)
# –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π `run_bot.py` –¥–ª—è polling


# ‚úÖ –ë–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Railway (–¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏–∂–µ)
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run("app.main:app", host="0.0.0.0", port=port)
